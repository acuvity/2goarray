// Simple utility to convert a file into a Go byte array

// Clint Caywood

// http://github.com/cratonica/2goarray
package main

import (
	"fmt"
	"os"
	"strings"
)

const (
	NAME         = "2goarray"
	VERSION      = "0.1.0"
	URL          = "http://github.com/acuvity/2goarray"
	GENERATED_BY = "// File generated by " + NAME + " v" + VERSION + " (" + URL + ")"
)

func check(e error) {
	if e != nil {
		panic(e)
	}
}

func generate(packageName, varName, buildFlags string, data []byte) string {

	output := ""
	if buildFlags != "" {
		output += fmt.Sprintf("%s\n\n", buildFlags)
	}
	output += fmt.Sprintf(GENERATED_BY + "\n\n")
	output += fmt.Sprintf("package %s\n\n", packageName)
	output += fmt.Sprintf("var %s []byte = []byte{", varName)
	for n := 0; n < len(data); n++ {
		if n%12 == 0 {
			output += "\n\t"
		}
		output += fmt.Sprintf("0x%02x, ", data[n])
	}
	output += "\n}\n\n"
	return output
}

func main() {
	if len(os.Args) != 5 && len(os.Args) != 6 {
		fmt.Print(NAME + " v" + VERSION + "\n\n")
		fmt.Println("Usage: " + NAME + " <array-name> <package-name> <input-file> <output-file> [build-string]")
		fmt.Printf("%d %s\n", len(os.Args), strings.Join(os.Args, " "))
		return
	}

	data, err := os.ReadFile(os.Args[3])
	check(err)

	output := generate(os.Args[2], os.Args[1], os.Args[5], data)

	err = os.WriteFile(os.Args[4], []byte(output), 0644)
	check(err)
}
